// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package userQ

import (
	"context"

	"github.com/google/uuid"
)

const create = `-- name: Create :exec
INSERT INTO users (
    name, surname, email
) VALUES (
    $1, $2, $3
)
`

type CreateParams struct {
	Name    string `db:"name" json:"name"`
	Surname string `db:"surname" json:"surname"`
	Email   string `db:"email" json:"email"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.ExecContext(ctx, create, arg.Name, arg.Surname, arg.Email)
	return err
}

const deleteByEmail = `-- name: DeleteByEmail :execrows
DELETE FROM users WHERE email = $1
`

func (q *Queries) DeleteByEmail(ctx context.Context, email string) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteByEmail, email)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAll = `-- name: GetAll :many
SELECT id, name, surname, email FROM users
`

func (q *Queries) GetAll(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllByNames = `-- name: GetAllByNames :many
SELECT id, name, surname, email FROM users
ORDER BY name
`

func (q *Queries) GetAllByNames(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllByNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Surname,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByEmail = `-- name: GetByEmail :one
SELECT id, name, surname, email FROM users
WHERE email = $1
`

func (q *Queries) GetByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Email,
	)
	return i, err
}

const getById = `-- name: GetById :one
SELECT id, name, surname, email FROM users
WHERE id = $1
`

func (q *Queries) GetById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Surname,
		&i.Email,
	)
	return i, err
}
